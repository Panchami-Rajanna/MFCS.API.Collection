{
	"info": {
		"_postman_id": "65cdf3be-71d6-471b-8da1-996b61c82c64",
		"name": "MFCS_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "25051645",
		"_collection_link": "https://blue-moon-84997.postman.co/workspace/MFCS_API-TESTING~482e1e9b-5fb2-41b5-bcc5-bf784d679f27/collection/25051645-65cdf3be-71d6-471b-8da1-996b61c82c64?source=collection_link"
	},
	"item": [
		{
			"name": "Generate_Token",
			"item": [
				{
					"name": "Access_Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check the status code is 200\", function(){\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"if (jsonData.access_token) {\r",
									"    console.log(jsonData.access_token);\r",
									"    let Access = jsonData.access_token;\r",
									"    console.log(Access);\r",
									"    pm.environment.set(\"Access_Token\", Access);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "webapp",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": "{{tokenURL}}/realms/{{env}}/protocol/openid-connect/token"
					},
					"response": []
				},
				{
					"name": "RPT_Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check the status code is 200\", function(){\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"if (jsonData.access_token) {\r",
									"    console.log(jsonData.access_token);\r",
									"    let bearer = jsonData.access_token;\r",
									"    console.log(bearer);\r",
									"    pm.environment.set(\"RPT_Token\", bearer);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Access_Token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer %access_token%"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
									"type": "text"
								},
								{
									"key": "audience",
									"value": "{{audience}}",
									"type": "text"
								}
							]
						},
						"url": "{{tokenURL}}/realms/{{env}}/protocol/openid-connect/token"
					},
					"response": []
				}
			]
		},
		{
			"name": "SITE_API",
			"item": [
				{
					"name": "Create Site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"siteId\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.set(\"RandomName\", pm.variables.replaceIn('{{$randomFirstName}}'))\r",
									"\r",
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"RandomName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{RandomName}}\",\r\n  \"description\": \"Test description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Get list of Sites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData).not.to.be.null;\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData[0]).to.have.property('description');\r",
									"    pm.expect(jsonData[0].description).not.to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Create Site  only mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"     pm.expect(jsonData.name).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description).not.to.be.null;\r",
									"    pm.expect(jsonData.description).to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"siteId1\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.set(\"RandomName\", pm.variables.replaceIn('{{$randomFirstName}}'))\r",
									"\r",
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"RandomName1\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{RandomName1}}\",\r\n  \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Create Site duplicate name -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var title = responseBody.title\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(title).to.eql(\"Conflict\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{RandomName}}\",\r\n  \"description\": \"Test description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Create site name special character -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Name[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The field Name must match the regular expression '^[a-zA-Z0-9_ -]*$'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"test/^\",\r\n  \"description\": \"Test description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Create site without name  -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Name[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The Name field is required.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"Test description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Create site name character length exceeded -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Name[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The field Name must be a string or array type with a maximum length of '30'.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"asdfghjkloiuytredfghmqwerysbstajwqj\",\r\n  \"description\": \"Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Create site desc character length exceeded -ve Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Description[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The field Description must be a string or array type with a maximum length of '300'.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"test11\",\r\n  \"description\": \"M7hYZHpHRN4TZ3ajCbctQWa1Hbq426k22jE26dhYuDaTHF7R04Vr45A5E6cz67SqXH3p9HZeuKNniF8XrrAn7HQF8fLMw77cghN7UxYdFvnZcDDa8mHV86e4j1wPR1zmyyrzmZfDXFrygaVPdb9F7btZkLqY77YCa0KhCzAMu7EqVJp3iVV8kUBQa2Wvq8KVP8Bw1niRThPPKLGrMbgGjvf8igLkycmuQuNyXfY2jWjzBBqXKpJar0hBWeDC2GfNZG7ABSapcJECfYLjgVddyuVPvUU1JKvyeQ65Ag26y6kC4m1Wf7rtVj\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Get site details by siteID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Site/{{siteId}}"
					},
					"response": []
				},
				{
					"name": "Get details by invalid siteID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.id[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The value '38033268-fa1d-47c8-a557-a9504462dd9' is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Site/38033268-fa1d-47c8-a557-a9504462dd9"
					},
					"response": []
				},
				{
					"name": "Get site details by non-existing siteID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var title = responseBody.title\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(title).to.eql(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Site/38033268-fa1d-47c8-a557-a9504462dd92"
					},
					"response": []
				},
				{
					"name": "Update site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if id is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description).not.to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"update\",\r\n  \"description\": \"API test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Site/{{siteId}}"
					},
					"response": []
				},
				{
					"name": "Update site with invalid siteID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errormessage = jsonData.errors.id[0]\r",
									"\r",
									"pm.test(\"Validate the error message\", function(){\r",
									"    pm.expect(errormessage).to.eql(\"The value 'af7cce72-c32d-4798-828c-f594525a771' is not valid.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"update\",\r\n  \"description\": \"API test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Site/af7cce72-c32d-4798-828c-f594525a771"
					},
					"response": []
				},
				{
					"name": "Update with duplicate name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData.data).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if id is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description).not.to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"update\",\r\n  \"description\": \"API test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Site/{{siteId}}"
					},
					"response": []
				},
				{
					"name": "Update without name -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Name[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The Name field is required.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"API test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Site/{{siteId}}"
					},
					"response": []
				},
				{
					"name": "delete site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Site/{{siteId}}"
					},
					"response": []
				},
				{
					"name": "Update site with non-existing siteID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Validate the status title  message\", function(){\r",
									"    pm.expect(jsonData.title).to.eql(\"Not Found\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"update\",\r\n  \"description\": \"API test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Site/af7cce72-c32d-4798-828c-f594525a7715"
					},
					"response": []
				},
				{
					"name": "delete site  with only mandatory field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if response value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Site/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "delete site by invalid siteID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.id[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The value '70102551-aa52-4378-9429-8731fb9e179' is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Site/70102551-aa52-4378-9429-8731fb9e179"
					},
					"response": []
				},
				{
					"name": "Delete site by non-existing siteID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var title = responseBody.title\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(title).to.eql(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Site/{{siteId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "AREA_API",
			"item": [
				{
					"name": "Create Site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(jsonData.id)\r",
									"let ID = jsonData.id\r",
									"console.log(ID)\r",
									"pm.environment.set(\"site_Id\",ID)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.set(\"RandomName\", pm.variables.replaceIn('{{$randomFirstName}}'))\r",
									"\r",
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"SiteName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{SiteName}}\",\r\n  \"description\": \"Test description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Create Area",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is : \"+ pm.response.code, function () { \r",
									"\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200])\r",
									"\r",
									"});\r",
									" \r",
									"pm.test(\"Status code is : \"+ pm.response.code, function () {  \r",
									"\r",
									"pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData.data).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData.id).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if NAME  is available\", function(){\r",
									"    pm.expect(jsonData.name).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description  is available\", function(){\r",
									"    pm.expect(jsonData.description).not.equal(null);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if siteId  is available\", function(){\r",
									"    pm.expect(jsonData.siteid).not.equal(null);\r",
									"\r",
									"});\r",
									"// Setting environment variable\r",
									"if (jsonData && jsonData.id) {\r",
									"    pm.environment.set(\"AreaId1\", jsonData.id);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.set(\"RandomName\", pm.variables.replaceIn('{{$randomFirstName}}'))\r",
									"\r",
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"Area_name\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{Area_name}}\",\r\n  \"description\": \"string\",\r\n  \"siteId\": \"{{site_Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "create area only mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									" \r",
									"pm.test(\"Status code is : \"+ pm.response.code, function () {  \r",
									"\r",
									"pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData.data).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData.id).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if NAME  is available\", function(){\r",
									"    pm.expect(jsonData.name).not.equal(null);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if siteId  is available\", function(){\r",
									"    pm.expect(jsonData.siteid).not.equal(null);\r",
									"\r",
									"});\r",
									"// Setting environment variable\r",
									"if (jsonData && jsonData.id) {\r",
									"    pm.environment.set(\"AreaId\", jsonData.id);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"Area_name2\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{Area_name2}}\",\r\n  \"description\": \"\",\r\n  \"siteId\": \"{{site_Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "create area duplicate name (-)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var title = responseBody.title\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(title).to.eql(\"Conflict\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{Area_name2}}\",\r\n  \"description\": \"Testing\",\r\n  \"siteId\": \"{{site_Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "create area name spectial character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Name[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The field Name must match the regular expression '^[a-zA-Z0-9_ -]*$'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"trial/\",\r\n  \"description\": \"test\",\r\n  \"siteId\": \"{{site_Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "Create Area  without area name(-)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Name[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The Name field is required.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"test\",\r\n  \"siteId\": \"{{site_Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "Create Area name with numbers area name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									" \r",
									"pm.test(\"Status code is : \"+ pm.response.code, function () {  \r",
									"\r",
									"pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData.data).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData.id).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if NAME  is available\", function(){\r",
									"    pm.expect(jsonData.name).not.equal(null);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if siteId  is available\", function(){\r",
									"    pm.expect(jsonData.siteid).not.equal(null);\r",
									"\r",
									"});\r",
									"// Setting environment variable\r",
									"if (jsonData && jsonData.id) {\r",
									"    pm.environment.set(\"AreaId2\", jsonData.id);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"12345\",\r\n  \"description\": \"test\",\r\n  \"siteId\": \"{{site_Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "Create area  without siteid(-)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test if status code is 400\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Check error message for 'area' field\", function() {\r",
									"    pm.expect(responseBody.errors.area[0]).to.eql(\"The area field is required.\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check error message for '$.siteId' field\", function() {\r",
									"    pm.expect(responseBody.errors['$.siteId'][0]).to.eql(\"The JSON value could not be converted to System.Guid. Path: $.siteId | LineNumber: 3 | BytePositionInLine: 14.\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if the title is as expected\", function() {\r",
									"    pm.expect(responseBody.title).to.eql(\"One or more validation errors occurred.\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"testunit\",\r\n  \"description\": \"test\",\r\n  \"siteId\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "Create area  with wrong siteid(-)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test if status code is 400\r",
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Check error message\", function() {\r",
									"    pm.expect(responseBody.Message).to.be.eql(\"Internal Server Error.\")\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"testunit\",\r\n  \"description\": \"test\",\r\n  \"siteId\": \"7000e682-5045-43c0-ab92-e9d17c47603d\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "Create Area name character length exceeded -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Name[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The field Name must be a string or array type with a maximum length of '30'.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"hsadbcasg7uyrbjhbfuybgbfubhdytdytvu\",\r\n  \"description\": \"test\",\r\n  \"siteId\": \"{{site_Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "Create area desc character length exceeded -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Description[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The field Description must be a string or array type with a maximum length of '300'.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"name\": \"TestUnit\",\r\n  \"description\": \"M7hYZHpHRN4TZ3ajCbctQWa1Hbq426k22jE26dhYuDaTHF7R04Vr45A5E6cz67SqXH3p9HZeuKNniF8XrrAn7HQF8fLMw77cghN7UxYdFvnZcDDa8mHV86e4j1wPR1zmyyrzmZfDXFrygaVPdb9F7btZkLqY77YCa0KhCzAMu7EqVJp3iVV8kUBQa2Wvq8KVP8Bw1niRThPPKLGrMbgGjvf8igLkycmuQuNyXfY2jWjzBBqXKpJar0hBWeDC2GfNZG7ABSapcJECfYLjgVddyuVPvUU1JKvyeQ65Ag26y6kC4m1Wf7rtVj\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "Get list of Area",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData.data).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData[0].id).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData[0].name).not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"verify if description is available\", function(){\r",
									"    pm.expect(jsonData[0].description).not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"verify if siteid is available\", function(){\r",
									"    pm.expect(jsonData[0].siteId).not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"verify if site ia available\", function(){\r",
									"    pm.expect(jsonData[0].site).not.equal(null)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "Get area details by areaID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is : \"+ pm.response.code, function () { \r",
									"\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 201])\r",
									"\r",
									"});\r",
									" \r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData.data).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData.id).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData.description).not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"Verify siteId is available\", function(){\r",
									"    pm.expect(jsonData.siteid).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if site is available\", function(){\r",
									"    pm.expect(jsonData.site).not.equal(null)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area/{{AreaId1}}"
					},
					"response": []
				},
				{
					"name": "Get area details by invalid areaID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for response status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for error message\r",
									"pm.test(\"Error message is correct\", function() {\r",
									"    var responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.errors.id[0]).to.eql(\"The value 'bdef4ac4-651e-47e9-92f4-7fb2c3a98f1' is not valid.\");\r",
									"});\r",
									"\r",
									"// Test for traceId\r",
									"pm.test(\"TraceId is present\", function() {\r",
									"    pm.expect(pm.response.json().traceId).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Area/bdef4ac4-651e-47e9-92f4-7fb2c3a98f1"
					},
					"response": []
				},
				{
					"name": "Get Area details by non-existing siteID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var title = responseBody.title\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(title).to.eql(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Area/38033268-fa1d-47c8-a557-a9504462dd92"
					},
					"response": []
				},
				{
					"name": "Update area",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData.data).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData.id).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the name value\", function(){\r",
									"    pm.expect(jsonData.name).to.eql(\"update\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the description value\", function(){\r",
									"    pm.expect(jsonData.description).to.eql(\"test_api\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"update\",\r\n  \"description\": \"test_api\",\r\n  \"siteId\": \"{{site_Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area/{{AreaId1}}"
					},
					"response": []
				},
				{
					"name": "Update area with duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData.data).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData.id).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the name value\", function(){\r",
									"    pm.expect(jsonData.name).to.eql(\"update\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the description value\", function(){\r",
									"    pm.expect(jsonData.description).to.eql(\"test_api\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"update\",\r\n  \"description\": \"test_api\",\r\n  \"siteId\": \"{{site_Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area/{{AreaId1}}"
					},
					"response": []
				},
				{
					"name": "Update Area non-existing Area -ve Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"check the error\", function(){\r",
									"    pm.expect(jsonData.title).to.eql(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"update api\",\r\n  \"description\": \"Testing\",\r\n  \"areaId\": \"{{site_Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area/f5016185-176a-4ef9-ab4a-6d1bc742a75a"
					},
					"response": []
				},
				{
					"name": "Update area without name -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Name[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The Name field is required.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"Testing\",\r\n  \"areaId\": \"{{site_Id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area/{{site_Id}}"
					},
					"response": []
				},
				{
					"name": "Delete area",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Area/{{AreaId1}}"
					},
					"response": []
				},
				{
					"name": "Delete area with number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Area/{{AreaId2}}"
					},
					"response": []
				},
				{
					"name": "Delete Area mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Area/{{AreaId}}"
					},
					"response": []
				},
				{
					"name": "delete Area by invalid Areaid -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.id[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The value '70102551-aa52-4378-9429-8731fb9e179' is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Area/70102551-aa52-4378-9429-8731fb9e179"
					},
					"response": []
				},
				{
					"name": "delete site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Site/{{site_Id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "UNIT_API",
			"item": [
				{
					"name": "Create Site  only mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"siteId1\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.set(\"RandomName\", pm.variables.replaceIn('{{$randomFirstName}}'))\r",
									"\r",
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"RandomName1\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{RandomName1}}\",\r\n  \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Create Area",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AreaName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(jsonData.id)\r",
									"let ID = jsonData.id\r",
									"console.log(ID)\r",
									"pm.environment.set(\"areaId\",ID)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{AreaName}}\",\r\n  \"description\": \"string\",\r\n  \"siteId\": \"{{siteId1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "Create unit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"UnitName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if areaId is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('areaId');\r",
									"    pm.expect(jsonData.areaId).not.to.be.null;\r",
									"});\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"unitId\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{UnitName}}\",\r\n  \"description\": \"Test\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit"
					},
					"response": []
				},
				{
					"name": "Create unit with only mandatory fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"UnitName1\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"    pm.expect(jsonData.id).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"    pm.expect(jsonData.name).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description).not.to.be.null;\r",
									"    pm.expect(jsonData.description).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify areaId is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('areaId');\r",
									"    pm.expect(jsonData.areaId).not.to.be.null;\r",
									"    pm.expect(jsonData.areaId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify area is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('area');\r",
									"    pm.expect(jsonData.area).not.to.be.null;\r",
									"    pm.expect(jsonData.area).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify site is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('site');\r",
									"    pm.expect(jsonData.site).not.to.be.null;\r",
									"    pm.expect(jsonData.site).to.be.empty;\r",
									"});\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"unitId1\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{UnitName1}}\",\r\n  \"description\": \"\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit"
					},
					"response": []
				},
				{
					"name": "Create unit with duplicate name -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var title = responseBody.title\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(title).to.eql(\"Conflict\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{UnitName}}\",\r\n  \"description\": \"Test\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit"
					},
					"response": []
				},
				{
					"name": "Create unit name special characters -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Name[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The field Name must match the regular expression '^[a-zA-Z0-9_ -]*$'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"test**/\",\r\n  \"description\": \"Test\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit"
					},
					"response": []
				},
				{
					"name": "Create unit without name  -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Name[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The Name field is required.\");\r",
									"});\r",
									"\r",
									"pm.test(\"check if the title is as expected\", function(){\r",
									"    pm.expect(responseBody.title).to.eql(\"One or more validation errors occurred.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"Test\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit"
					},
					"response": []
				},
				{
					"name": "Create unit without Area Id -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.unit[0];\r",
									"\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The unit field is required.\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"check if the title is as expected\", function(){\r",
									"    pm.expect(responseBody.title).to.eql(\"One or more validation errors occurred.\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"TestUnit\",\r\n  \"description\": \"Test\",\r\n  \"areaId\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit"
					},
					"response": []
				},
				{
					"name": "Create unit name character length exceeded -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Name[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The field Name must be a string or array type with a maximum length of '30'.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"weeeerrrrrrtyuiopllllllllllkjhgfdsazxcvbnm12345\",\r\n  \"description\": \"Test\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Create unit desc character length exceeded -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Description[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The field Description must be a string or array type with a maximum length of '300'.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"name\": \"TestUnit\",\r\n  \"description\": \"M7hYZHpHRN4TZ3ajCbctQWa1Hbq426k22jE26dhYuDaTHF7R04Vr45A5E6cz67SqXH3p9HZeuKNniF8XrrAn7HQF8fLMw77cghN7UxYdFvnZcDDa8mHV86e4j1wPR1zmyyrzmZfDXFrygaVPdb9F7btZkLqY77YCa0KhCzAMu7EqVJp3iVV8kUBQa2Wvq8KVP8Bw1niRThPPKLGrMbgGjvf8igLkycmuQuNyXfY2jWjzBBqXKpJar0hBWeDC2GfNZG7ABSapcJECfYLjgVddyuVPvUU1JKvyeQ65Ag26y6kC4m1Wf7rtVj\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Get list of units",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData.data).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData[0].id).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData[0].name).not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"verify if description is available\", function(){\r",
									"    pm.expect(jsonData[0].description).not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"verify if areaId is available\", function(){\r",
									"    pm.expect(jsonData[0].areaId).not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"verify if area ia available\", function(){\r",
									"    pm.expect(jsonData[0].area).not.equal(null)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit"
					},
					"response": []
				},
				{
					"name": "Get unit details by unitId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData.data).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData.id).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData.name).not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"verify if description is available\", function(){\r",
									"    pm.expect(jsonData.description).not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"verify if areaId is available\", function(){\r",
									"    pm.expect(jsonData.areaId).not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"verify if area is available\", function(){\r",
									"    pm.expect(jsonData.area).not.equal(null)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Unit/{{unitId}}"
					},
					"response": []
				},
				{
					"name": "Get unit details by invalid unitId-ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.id[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The value 'c6ab95d1-e488-41ec-9816-0ec16b2970f' is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Unit/c6ab95d1-e488-41ec-9816-0ec16b2970f"
					},
					"response": []
				},
				{
					"name": "Get unit details by non-existing unitId-ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var title = responseBody.title\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(title).to.eql(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Unit/c6ab95d1-e488-41ec-9816-0ec16b2970d4"
					},
					"response": []
				},
				{
					"name": "Update Unit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData.data).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData.id).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"verify the name value\", function(){\r",
									"    pm.expect(jsonData.name).to.eql(\"update api\")\r",
									"})\r",
									"\r",
									"pm.test(\"verify the description value\", function(){\r",
									"    pm.expect(jsonData.description).to.eql(\"Testing\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"update api\",\r\n  \"description\": \"Testing\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit/{{unitId}}"
					},
					"response": []
				},
				{
					"name": "Update Unit invalid unitID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errormessage = jsonData.errors.id[0]\r",
									"\r",
									"pm.test(\"Validate the error message\", function(){\r",
									"    pm.expect(errormessage).to.eql(\"The value 'aca7c92b-d0ad-4f4a-84ee-ace433f756' is not valid.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"update api\",\r\n  \"description\": \"Testing\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit/aca7c92b-d0ad-4f4a-84ee-ace433f756"
					},
					"response": []
				},
				{
					"name": "Update Unit with duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Items are available\", function(){\r",
									"    pm.expect(jsonData.data).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData.id).not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"verify the name value\", function(){\r",
									"    pm.expect(jsonData.name).to.eql(\"update api\")\r",
									"})\r",
									"\r",
									"pm.test(\"verify the description value\", function(){\r",
									"    pm.expect(jsonData.description).to.eql(\"Testing\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"update api\",\r\n  \"description\": \"Testing\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit/{{unitId}}"
					},
					"response": []
				},
				{
					"name": "Update unit without name -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Name[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The Name field is required.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"Testing\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit/{{unitId}}"
					},
					"response": []
				},
				{
					"name": "Delete Unit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Unit/{{unitId}}"
					},
					"response": []
				},
				{
					"name": "Update Unit non-existing unitID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"check the error\", function(){\r",
									"    pm.expect(jsonData.title).to.eql(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"update api\",\r\n  \"description\": \"Testing\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit/{{unitId}}"
					},
					"response": []
				},
				{
					"name": "Delete Unit mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Unit/{{unitId1}}"
					},
					"response": []
				},
				{
					"name": "delete unit by invalid unitID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.id[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The value '70102551-aa52-4378-9429-8731fb9e179' is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Unit/70102551-aa52-4378-9429-8731fb9e179"
					},
					"response": []
				},
				{
					"name": "Delete unit by non-existing unitID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var title = responseBody.title\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(title).to.eql(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit/{{unitId}}"
					},
					"response": []
				},
				{
					"name": "Delete Area",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Area/{{areaId}}"
					},
					"response": []
				},
				{
					"name": "delete site  with only mandatory field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if response value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Site/{{siteId1}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "ASSET_TYPE_API",
			"item": [
				{
					"name": "Create Asset Type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetTypeName\", firstName);\r",
									"\r",
									"setTimeout(function() {\r",
									"    console.log(\"Delay before request\");\r",
									"}, 2000); // Delay of 2 seconds"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetCategory is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetCategory');\r",
									"    pm.expect(jsonData.assetCategory).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetIconFile is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetIconFile');\r",
									"    pm.expect(jsonData.assetIconFile).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if paramsFile is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('paramsFile');\r",
									"    pm.expect(jsonData.paramsFile).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if parameters is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('parameters');\r",
									"    pm.expect(jsonData.parameters).not.to.be.null;\r",
									"});\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"AssetTypeID\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "Test_asset-21",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing_ **!#",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "A_06-24",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"type": "file",
									"src": "solar system.jpg"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "parameters.json"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Create Asset Type duplicate-ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetTypeName\", firstName);\r",
									"\r",
									"setTimeout(function() {\r",
									"    console.log(\"Delay before request\");\r",
									"}, 2000); // Delay of 2 seconds"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData.title).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"check the status title\", function(){\r",
									"    pm.expect(jsonData.title).to.eql(\"Conflict\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "Test_asset-21",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing_duplicate-name!!",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "A_06-24",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Create Asset Type only mandatory fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"// var firstName = Math.random().toString(36).substring(7);\r",
									"// pm.environment.set(\"AssetTypeName\", firstName);\r",
									"\r",
									"setTimeout(function() {\r",
									"    console.log(\"Delay before request\");\r",
									"}, 2000); // Delay of 2 seconds"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetCategory is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetCategory');\r",
									"    pm.expect(jsonData.assetCategory).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetIconFile is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetIconFile');\r",
									"    pm.expect(jsonData.assetIconFile).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if paramsFile is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('paramsFile');\r",
									"    pm.expect(jsonData.paramsFile).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if parameters is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('parameters');\r",
									"    pm.expect(jsonData.parameters).not.to.be.null;\r",
									"});\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"AssetTypeID1\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "{{AssetTypeName}}",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Create Asset Type name with special character -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetTypeName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errormessage = jsonData.errors.Name[0]\r",
									"\r",
									"pm.test(\"Verify error is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('errors');\r",
									"    pm.expect(errormessage).not.to.be.null;\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(errormessage).to.eql(\"The field Name must match the regular expression '^[a-zA-Z0-9_ -]*$'.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "test_!!!*",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "A",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Create Asset Type name exceeded max character len -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetTypeName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errormessage = jsonData.errors.Name[0]\r",
									"\r",
									"pm.test(\"Verify error is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('errors');\r",
									"    pm.expect(errormessage).not.to.be.null;\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(errormessage).to.eql(\"The field Name must be a string or array type with a maximum length of '30'.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "qwertyuiopasdfghjklzxcvbnm123456-890",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "A",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Create Asset Type description exceeded max character len -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetTypeName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errormessage = jsonData.errors.Description[0]\r",
									"\r",
									"pm.test(\"Verify error is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('errors');\r",
									"    pm.expect(errormessage).not.to.be.null;\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(errormessage).to.eql(\"The field Description must be a string or array type with a maximum length of '300'.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "test-1",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "M7hYZHpHRN4TZ3ajCbctQWa1Hbq426k22jE26dhYuDaTHF7R04Vr45A5E6cz67SqXH3p9HZeuKNniF8XrrAn7HQF8fLMw77cghN7UxYdFvnZcDDa8mHV86e4j1wPR1zmyyrzmZfDXFrygaVPdb9F7btZkLqY77YCa0KhCzAMu7EqVJp3iVV8kUBQa2Wvq8KVP8Bw1niRThPPKLGrMbgGjvf8igLkycmuQuNyXfY2jWjzBBqXKpJar0hBWeDC2GfNZG7ABSapcJECfYLjgVddyuVPvUU1JKvyeQ65Ag26y6kC4m1Wf7rtVj",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "A",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Create Asset Type assetCategory exceeded max character len -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetTypeName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errormessage = jsonData.errors.AssetCategory[0]\r",
									"\r",
									"pm.test(\"Verify error is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('errors');\r",
									"    pm.expect(errormessage).not.to.be.null;\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(errormessage).to.eql(\"The field AssetCategory must be a string or array type with a maximum length of '30'.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "test-1",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing__1",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "qwertyuiopasdfghjklzxcvbnm1234567890",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Create Asset Type assetCategory special character len -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetTypeName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errormessage = jsonData.errors.AssetCategory[0]\r",
									"\r",
									"pm.test(\"Verify error is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('errors');\r",
									"    pm.expect(errormessage).not.to.be.null;\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(errormessage).to.eql(\"The field AssetCategory must match the regular expression '^[a-zA-Z0-9_ -]*$'.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "test-1",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing__1",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "testassetcategory_1_1*^",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Create Asset Type without mandatory fields -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetTypeName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errormessage = jsonData.errors.Name[0]\r",
									"\r",
									"pm.test(\"Verify error is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('errors');\r",
									"    pm.expect(errormessage).not.to.be.null;\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(errormessage).to.eql(\"The Name field is required.\")\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing__1",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "testassetcategory_1",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": []
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Create Asset Type wrong paramsFile type -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetTypeName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"check the status title\", function(){\r",
									"    pm.expect(jsonData.title).to.be.eql(\"Bad Request\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "test_11",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing__1",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "testassetcategory_1",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2c625-945a-4b90-8790-b2f71dc66bb0"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Get list of asset types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response is an array and not empty\r",
									"pm.test(\"Response is a non-empty array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Verify required fields for the first item in the array\r",
									"let firstItem = jsonData[0];\r",
									"\r",
									"pm.test(\"Verify ID is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('id');\r",
									"    pm.expect(firstItem.id).not.to.be.null;\r",
									"    pm.expect(firstItem.id).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify name is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('name');\r",
									"    pm.expect(firstItem.name).not.to.be.null;\r",
									"    pm.expect(firstItem.name).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('description');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetCategory is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetCategory');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetIconFile is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetIconFile');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetIcon is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetIcon');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify paramsFile is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('paramsFile');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify parameters is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('parameters');\r",
									"    pm.expect(firstItem.parameters).not.to.be.null;\r",
									"    pm.expect(firstItem.parameters).not.to.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function() {\r",
									"    console.log(\"Delay before request\");\r",
									"}, 2000); // Delay of 2 seconds"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Create Asset Type wrong assetIcon File type -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetTypeName\", firstName);\r",
									"\r",
									"setTimeout(function() {\r",
									"    console.log(\"Delay before request\");\r",
									"}, 2000); // Delay of 2 seconds"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 406\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									" \r",
									"pm.test(\"check the status title\", function(){\r",
									"    pm.expect(jsonData.title).to.be.eql(\"Not Acceptable\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "test_110",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing__1",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "testassetcategory_1",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"type": "file",
									"src": "postman-cloud:///1ef2c625-945a-4b90-8790-b2f71dc66bb0"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Get asset Type detail by asset Type ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetCategory is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetCategory');\r",
									"    pm.expect(jsonData.assetCategory).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetIconFile is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetIconFile');\r",
									"    pm.expect(jsonData.assetIconFile).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if paramsFile is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('paramsFile');\r",
									"    pm.expect(jsonData.paramsFile).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if parameters is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('parameters');\r",
									"    pm.expect(jsonData.parameters).not.to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/AssetType/{{AssetTypeID}}"
					},
					"response": []
				},
				{
					"name": "Get asset Type detail by invalid asset Type ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let error = jsonData.errors.id[0]\r",
									"\r",
									"pm.test(\"verify if error is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property(\"errors\")\r",
									"    pm.expect(jsonData.errors).not.to.be.eql(null)\r",
									"})\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(error).to.eql(\"The value 'c47434ae-1a9b-4711-97cb-ff78362f71a' is not valid.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/AssetType/c47434ae-1a9b-4711-97cb-ff78362f71a"
					},
					"response": []
				},
				{
					"name": "Get asset Type detail by non-existing asset Type ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"verify if title  is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property(\"title\")\r",
									"    pm.expect(jsonData.title).not.to.be.eql(null)\r",
									"})\r",
									"\r",
									"pm.test(\"verify the status title message\", function(){\r",
									"    pm.expect(jsonData.title).to.eql(\"Not Found\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function() {\r",
									"    console.log(\"Delay before request\");\r",
									"}, 2000); // Delay of 2 seconds"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/AssetType/c48434ae-1a9b-4711-97cb-ff78362f71a1"
					},
					"response": []
				},
				{
					"name": "Update Asset Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"verify the value of name\", function(){\r",
									"    pm.expect(jsonData.name).to.eql(\"Asset-Type-1\")\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if Description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"verify the value of name\", function(){\r",
									"    pm.expect(jsonData.description).to.eql(\"Testing\")\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if assetCategory is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetCategory');\r",
									"    pm.expect(jsonData.assetCategory).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"verify the value of assetCategory\", function(){\r",
									"    pm.expect(jsonData.assetCategory).to.eql(\"A_06-2024\")\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if assetIconFile is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetIconFile');\r",
									"    pm.expect(jsonData.assetIconFile).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetIcon is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetIcon');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"if (jsonData.name) {\r",
									"    console.log(jsonData.name);\r",
									"    let Name = jsonData.name;\r",
									"    console.log(Name);\r",
									"    pm.environment.set(\"AssetTypeNameUpdate\", Name);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// var firstName = Math.random().toString(36).substring(7);\r",
									"// pm.environment.set(\"UpdatedName\", firstName);\r",
									"\r",
									"setTimeout(function() {\r",
									"    console.log(\"Delay before request\");\r",
									"}, 2000); // Delay of 2 seconds"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "Asset-Type-1",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "A_06-2024",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f96b-9c24-4050-a338-0528ffe5506c"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType/{{AssetTypeID}}"
					},
					"response": []
				},
				{
					"name": "Update Asset Type Duplicate name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"verify the value of name\", function(){\r",
									"    pm.expect(jsonData.name).to.eql(\"Asset-Type-1\")\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if Description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"verify the value of name\", function(){\r",
									"    pm.expect(jsonData.description).to.eql(\"Testing\")\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if assetCategory is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetCategory');\r",
									"    pm.expect(jsonData.assetCategory).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"verify the value of assetCategory\", function(){\r",
									"    pm.expect(jsonData.assetCategory).to.eql(\"A_06-2024\")\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if assetIconFile is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetIconFile');\r",
									"    pm.expect(jsonData.assetIconFile).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetIcon is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetIcon');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function() {\r",
									"    console.log(\"Delay before request\");\r",
									"}, 2000); // Delay of 2 seconds"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "Asset-Type-1",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "A_06-2024",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType/{{AssetTypeID}}"
					},
					"response": []
				},
				{
					"name": "Update Asset Type invalid asset Type ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errormessage = jsonData.errors.id[0]\r",
									"\r",
									"pm.test(\"Validate the error message\", function(){\r",
									"    pm.expect(errormessage).to.eql(\"The value '33e5414b-593c-481f-be41-94cf4d4253d' is not valid.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function() {\r",
									"    console.log(\"Delay before request\");\r",
									"}, 2000); // Delay of 2 seconds"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "Test_asset-1",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "A_06-2024",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType/33e5414b-593c-481f-be41-94cf4d4253d"
					},
					"response": []
				},
				{
					"name": "Delete Asset Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/AssetType/{{AssetTypeID}}"
					},
					"response": []
				},
				{
					"name": "Delete Asset Type non-existing asset Type ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData.title).to.eql(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/AssetType/{{AssetTypeID}}"
					},
					"response": []
				},
				{
					"name": "Delete Asset Type invalid asset Type ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errormessage = jsonData.errors.id[0]\r",
									"\r",
									"pm.test(\"Validate the error message\", function(){\r",
									"    pm.expect(errormessage).to.eql(\"The value '33e5414b-593c-481f-be41-94cf4d5253f' is not valid.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/AssetType/33e5414b-593c-481f-be41-94cf4d5253f"
					},
					"response": []
				},
				{
					"name": "Delete Asset Type mandatory parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/AssetType/{{AssetTypeID1}}"
					},
					"response": []
				},
				{
					"name": "Update Asset Type Non-existing asset Type ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"check the error\", function(){\r",
									"    pm.expect(jsonData.title).to.eql(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"UpdatedName\", firstName);\r",
									"\r",
									"setTimeout(function() {\r",
									"    console.log(\"Delay before request\");\r",
									"}, 2000); // Delay of 2 seconds"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "{{UpdatedName}}",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "Testing",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "A_06-2024",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType/{{NonExistingID}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "ASSET_API",
			"item": [
				{
					"name": "Create Site  only mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"siteId1\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.set(\"RandomName\", pm.variables.replaceIn('{{$randomFirstName}}'))\r",
									"\r",
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"RandomName1\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{RandomName1}}\",\r\n  \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Create Area",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AreaName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(jsonData.id)\r",
									"let ID = jsonData.id\r",
									"console.log(ID)\r",
									"pm.environment.set(\"areaId\",ID)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{AreaName}}\",\r\n  \"description\": \"string\",\r\n  \"siteId\": \"{{siteId1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "Create unit with only mandatory fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"UnitName1\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"unitId1\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{UnitName1}}\",\r\n  \"description\": \"\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit"
					},
					"response": []
				},
				{
					"name": "Create Asset Type only mandatory fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetTypeName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"AssetTypeID1\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "{{AssetTypeName}}",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Create asset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"verify the value of description\", function(){\r",
									"    pm.expect(jsonData.description).to.eql(\"Test\")\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if unitId is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('unitId');\r",
									"    pm.expect(jsonData.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetTypeId is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetTypeId');\r",
									"    pm.expect(jsonData.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if unit is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('unit');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetType is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetType');\r",
									"});\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"assetID\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{AssetName}}\",\r\n  \"description\": \"Test\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"parameters\": \"{\\\"asset_metadata\\\":[{\\\"name\\\":\\\"serialNumber\\\",\\\"displayNumber\\\":\\\"Serial Number\\\",\\\"value\\\":463272352},{\\\"name\\\":\\\"installedOn\\\",\\\"displayNumber\\\":\\\"Installed On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"lastMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Last Maintenance On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"nextMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Next Maintenance On\\\",\\\"value\\\":\\\"07/31/2024\\\"}]}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset"
					},
					"response": []
				},
				{
					"name": "Create asset duplicate name -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// // Generate a random first name\r",
									"// var firstName = Math.random().toString(36).substring(7);\r",
									"// pm.environment.set(\"AssetName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"verify the status code title\", function(){\r",
									"    pm.expect(jsonData.title).to.eql(\"Conflict\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{AssetName}}\",\r\n  \"description\": \"Test\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n   \"parameters\": \"{\\\"asset_metadata\\\":[{\\\"name\\\":\\\"serialNumber\\\",\\\"displayNumber\\\":\\\"Serial Number\\\",\\\"value\\\":463272352},{\\\"name\\\":\\\"installedOn\\\",\\\"displayNumber\\\":\\\"Installed On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"lastMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Last Maintenance On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"nextMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Next Maintenance On\\\",\\\"value\\\":\\\"07/31/2024\\\"}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset"
					},
					"response": []
				},
				{
					"name": "Create asset name with special characters-ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errorMessage = jsonData.errors.Name[0]\r",
									"\r",
									"pm.test(\"verify the status code title\", function(){\r",
									"    pm.expect(errorMessage).to.eql( \"The field Name must match the regular expression '^[a-zA-Z0-9_ -]*$'.\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"API testing'/1/2.1\",\r\n  \"description\": \"Test\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n   \"parameters\": \"{\\\"asset_metadata\\\":[{\\\"name\\\":\\\"serialNumber\\\",\\\"displayNumber\\\":\\\"Serial Number\\\",\\\"value\\\":463272352},{\\\"name\\\":\\\"installedOn\\\",\\\"displayNumber\\\":\\\"Installed On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"lastMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Last Maintenance On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"nextMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Next Maintenance On\\\",\\\"value\\\":\\\"07/31/2024\\\"}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset"
					},
					"response": []
				},
				{
					"name": "Create asset name character exceeded max value -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errormessage = jsonData.errors.Name[0]\r",
									"\r",
									"pm.test(\"verify the errormessage\", function(){\r",
									"    pm.expect(errormessage).to.eql(\"The field Name must be a string or array type with a maximum length of '30'.\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"qwertyuioplkjhgfdsazxcvbnm1234567890---\",\r\n  \"description\": \"Test\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n   \"parameters\": \"{\\\"asset_metadata\\\":[{\\\"name\\\":\\\"serialNumber\\\",\\\"displayNumber\\\":\\\"Serial Number\\\",\\\"value\\\":463272352},{\\\"name\\\":\\\"installedOn\\\",\\\"displayNumber\\\":\\\"Installed On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"lastMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Last Maintenance On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"nextMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Next Maintenance On\\\",\\\"value\\\":\\\"07/31/2024\\\"}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset"
					},
					"response": []
				},
				{
					"name": "Create asset Description character exceeded max value -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"var errorMessage = responseBody.errors.Description[0];\r",
									"\r",
									"pm.test(\"Check if error message is as expected\", function() {\r",
									"    pm.expect(errorMessage).to.eql(\"The field Description must be a string or array type with a maximum length of '300'.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test_asset-2\",\r\n  \"description\": \"M7hYZHpHRN4TZ3ajCbctQWa1Hbq426k22jE26dhYuDaTHF7R04Vr45A5E6cz67SqXH3p9HZeuKNniF8XrrAn7HQF8fLMw77cghN7UxYdFvnZcDDa8mHV86e4j1wPR1zmyyrzmZfDXFrygaVPdb9F7btZkLqY77YCa0KhCzAMu7EqVJp3iVV8kUBQa2Wvq8KVP8Bw1niRThPPKLGrMbgGjvf8igLkycmuQuNyXfY2jWjzBBqXKpJar0hBWeDC2GfNZG7ABSapcJECfYLjgVddyuVPvUU1JKvyeQ65Ag26y6kC4m1Wf7rtVj\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n   \"parameters\": \"{\\\"asset_metadata\\\":[{\\\"name\\\":\\\"serialNumber\\\",\\\"displayNumber\\\":\\\"Serial Number\\\",\\\"value\\\":463272352},{\\\"name\\\":\\\"installedOn\\\",\\\"displayNumber\\\":\\\"Installed On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"lastMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Last Maintenance On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"nextMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Next Maintenance On\\\",\\\"value\\\":\\\"07/31/2024\\\"}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset"
					},
					"response": []
				},
				{
					"name": "Create asset with wrong unitID -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the message displayed\", function(){\r",
									"    pm.expect(responseBody.Message).to.be.eql(\"Internal Server Error.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test_asset-2\",\r\n  \"description\": \"Testing\",\r\n  \"unitId\": \"8b72c7c7-4b29-49c3-a05c-fa3b7147de88\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"parameters\": \"{\\\"asset_metadata\\\":[{\\\"name\\\":\\\"serialNumber\\\",\\\"displayNumber\\\":\\\"Serial Number\\\",\\\"value\\\":463272352},{\\\"name\\\":\\\"installedOn\\\",\\\"displayNumber\\\":\\\"Installed On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"lastMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Last Maintenance On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"nextMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Next Maintenance On\\\",\\\"value\\\":\\\"07/31/2024\\\"}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset"
					},
					"response": []
				},
				{
					"name": "Create asset with wrong assetTypeID -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the message displayed\", function(){\r",
									"    pm.expect(responseBody.Message).to.be.eql(\"Internal Server Error.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test_asset-2\",\r\n  \"description\": \"Testing\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"8b72c7c7-4b29-49c3-a05c-fa3b7147de88\",\r\n   \"parameters\": \"{\\\"asset_metadata\\\":[{\\\"name\\\":\\\"serialNumber\\\",\\\"displayNumber\\\":\\\"Serial Number\\\",\\\"value\\\":463272352},{\\\"name\\\":\\\"installedOn\\\",\\\"displayNumber\\\":\\\"Installed On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"lastMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Last Maintenance On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"nextMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Next Maintenance On\\\",\\\"value\\\":\\\"07/31/2024\\\"}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset"
					},
					"response": []
				},
				{
					"name": "Create asset with only mandatory fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"verify the value of description\", function(){\r",
									"    pm.expect(jsonData.description).to.be.empty\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if unitId is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('unitId');\r",
									"    pm.expect(jsonData.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetTypeId is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetTypeId');\r",
									"    pm.expect(jsonData.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if unit is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('unit');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetType is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetType');\r",
									"});\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"assetID1\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{AssetName}}\",\r\n  \"description\": \"\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"parameters\": \"{\\\"asset_metadata\\\":[{\\\"name\\\":\\\"serialNumber\\\",\\\"displayNumber\\\":\\\"Serial Number\\\",\\\"value\\\":463272352},{\\\"name\\\":\\\"installedOn\\\",\\\"displayNumber\\\":\\\"Installed On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"lastMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Last Maintenance On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"nextMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Next Maintenance On\\\",\\\"value\\\":\\\"07/31/2024\\\"}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset"
					},
					"response": []
				},
				{
					"name": "Create asset without mandatory fields -ve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let errormessage = jsonData.errors.asset[0]\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(errormessage).to.eql(\"The asset field is required.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"API Testing\",\r\n  \"unitId\": \"\",\r\n  \"assetTypeId\": \"\",\r\n   \"parameters\": \"{\\\"asset_metadata\\\":[{\\\"name\\\":\\\"serialNumber\\\",\\\"displayNumber\\\":\\\"Serial Number\\\",\\\"value\\\":463272352},{\\\"name\\\":\\\"installedOn\\\",\\\"displayNumber\\\":\\\"Installed On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"lastMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Last Maintenance On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"nextMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Next Maintenance On\\\",\\\"value\\\":\\\"07/31/2024\\\"}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset"
					},
					"response": []
				},
				{
					"name": "Get list of assets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response is an array and not empty\r",
									"pm.test(\"Response is a non-empty array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Verify required fields for the first item in the array\r",
									"let firstItem = jsonData[0];\r",
									"\r",
									"pm.test(\"Verify ID is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('id');\r",
									"    pm.expect(firstItem.id).not.to.be.null;\r",
									"    pm.expect(firstItem.id).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify name is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('name');\r",
									"    pm.expect(firstItem.name).not.to.be.null;\r",
									"    pm.expect(firstItem.name).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('description');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unitId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unitId');\r",
									"    pm.expect(firstItem.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unit is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unit');\r",
									"    pm.expect(firstItem.unit).not.to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify assetTypeId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeId');\r",
									"    pm.expect(firstItem.assetTypeId).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetType is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetType');\r",
									"    pm.expect(firstItem.assetType).not.to.be.null\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset"
					},
					"response": []
				},
				{
					"name": "Get asset details by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if unitId is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('unitId');\r",
									"    pm.expect(jsonData.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if unit is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('unit');\r",
									"    pm.expect(jsonData.unit).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetTypeId is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetTypeId');\r",
									"    pm.expect(jsonData.assetTypeId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetType is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetType');\r",
									"    pm.expect(jsonData.assetType).not.to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/{{assetID}}"
					},
					"response": []
				},
				{
					"name": "Get asset details by invalid ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify the status code 400\", function(){\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"let errorMessage = jsonData.errors.id[0]\r",
									"\r",
									"pm.test(\"verify the errorMessage\", function(){\r",
									"    pm.expect(errorMessage).to.be.eql(\"The value '59492112-00ca-411f-aed0-de355722a4e' is not valid.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/59492112-00ca-411f-aed0-de355722a4e"
					},
					"response": []
				},
				{
					"name": "Get asset details by non-existing ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify the status code 404\", function(){\r",
									"    pm.response.to.have.status(404)\r",
									"})\r",
									"\r",
									"let jsonData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the status code title\", function(){\r",
									"    pm.expect(jsonData.title).to.be.eql(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/59492112-00ca-411f-aed0-de355722a3e7"
					},
					"response": []
				},
				{
					"name": "Update asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"TEST_asset-updated\",\r\n  \"description\": \"API testing\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{assetID}}"
					},
					"response": []
				},
				{
					"name": "Update asset duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"TEST_asset-updated\",\r\n  \"description\": \"API testing\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{assetID}}"
					},
					"response": []
				},
				{
					"name": "Update asset without name -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let error = jsonData.errors.Name[0]\r",
									"\r",
									"pm.test(\"verify the error message\", function () {\r",
									"     pm.expect(error).to.be.eql(\"The Name field is required.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"API testing\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{assetID}}"
					},
					"response": []
				},
				{
					"name": "Update asset invalid asset ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let error = jsonData.errors.id[0]\r",
									"\r",
									"pm.test(\"verify the error message\", function () {\r",
									"     pm.expect(error).to.be.eql(\"The value '39a6401b-1ffd-4f5a-a7aa-44539d8584b' is not valid.\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"TEST_asset-updated\",\r\n  \"description\": \"API testing\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/39a6401b-1ffd-4f5a-a7aa-44539d8584b"
					},
					"response": []
				},
				{
					"name": "Search_Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response is an array and not empty\r",
									"pm.test(\"Response is a non-empty array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Verify required fields for the first item in the array\r",
									"let firstItem = jsonData[0];\r",
									"\r",
									"pm.test(\"Verify ID is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('id');\r",
									"    pm.expect(firstItem.id).not.to.be.null;\r",
									"    pm.expect(firstItem.id).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify name is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('name');\r",
									"    pm.expect(firstItem.name).not.to.be.null;\r",
									"    pm.expect(firstItem.name).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('description');\r",
									"    pm.expect(firstItem.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unitId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unitId');\r",
									"    pm.expect(firstItem.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unit is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unit');\r",
									"    pm.expect(firstItem.unit).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify area is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('area');\r",
									"    pm.expect(firstItem.area).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify site is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('site');\r",
									"    pm.expect(firstItem.site).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetIcon is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetIcon');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeId');\r",
									"    pm.expect(firstItem.assetTypeId).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeParams is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeParams');\r",
									"    pm.expect(firstItem.assetTypeParams).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetType is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetType');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify parameters is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('parameters');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n   \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"assetId\": \"{{assetID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset without area field +ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response is an array and not empty\r",
									"pm.test(\"Response is a non-empty array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Verify required fields for the first item in the array\r",
									"let firstItem = jsonData[0];\r",
									"\r",
									"pm.test(\"Verify ID is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('id');\r",
									"    pm.expect(firstItem.id).not.to.be.null;\r",
									"    pm.expect(firstItem.id).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify name is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('name');\r",
									"    pm.expect(firstItem.name).not.to.be.null;\r",
									"    pm.expect(firstItem.name).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('description');\r",
									"    pm.expect(firstItem.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unitId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unitId');\r",
									"    pm.expect(firstItem.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unit is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unit');\r",
									"    pm.expect(firstItem.unit).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify area is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('area');\r",
									"    pm.expect(firstItem.area).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify site is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('site');\r",
									"    pm.expect(firstItem.site).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetIcon is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetIcon');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeId');\r",
									"    pm.expect(firstItem.assetTypeId).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeParams is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeParams');\r",
									"    pm.expect(firstItem.assetTypeParams).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetType is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetType');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify parameters is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('parameters');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"assetId\": \"{{assetID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset without unit ID field +ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response is an array and not empty\r",
									"pm.test(\"Response is a non-empty array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Verify required fields for the first item in the array\r",
									"let firstItem = jsonData[0];\r",
									"\r",
									"pm.test(\"Verify ID is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('id');\r",
									"    pm.expect(firstItem.id).not.to.be.null;\r",
									"    pm.expect(firstItem.id).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify name is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('name');\r",
									"    pm.expect(firstItem.name).not.to.be.null;\r",
									"    pm.expect(firstItem.name).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('description');\r",
									"    pm.expect(firstItem.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unitId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unitId');\r",
									"    pm.expect(firstItem.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unit is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unit');\r",
									"    pm.expect(firstItem.unit).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify area is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('area');\r",
									"    pm.expect(firstItem.area).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify site is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('site');\r",
									"    pm.expect(firstItem.site).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetIcon is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetIcon');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeId');\r",
									"    pm.expect(firstItem.assetTypeId).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeParams is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeParams');\r",
									"    pm.expect(firstItem.assetTypeParams).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetType is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetType');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify parameters is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('parameters');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"assetId\": \"{{assetID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset without asset Type Id field +ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response is an array and not empty\r",
									"pm.test(\"Response is a non-empty array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Verify required fields for the first item in the array\r",
									"let firstItem = jsonData[0];\r",
									"\r",
									"pm.test(\"Verify ID is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('id');\r",
									"    pm.expect(firstItem.id).not.to.be.null;\r",
									"    pm.expect(firstItem.id).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify name is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('name');\r",
									"    pm.expect(firstItem.name).not.to.be.null;\r",
									"    pm.expect(firstItem.name).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('description');\r",
									"    pm.expect(firstItem.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unitId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unitId');\r",
									"    pm.expect(firstItem.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unit is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unit');\r",
									"    pm.expect(firstItem.unit).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify area is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('area');\r",
									"    pm.expect(firstItem.area).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify site is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('site');\r",
									"    pm.expect(firstItem.site).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetIcon is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetIcon');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeId');\r",
									"    pm.expect(firstItem.assetTypeId).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeParams is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeParams');\r",
									"    pm.expect(firstItem.assetTypeParams).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetType is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetType');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify parameters is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('parameters');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n   \"unitId\": \"{{unitId1}}\",\r\n  \"assetId\": \"{{assetID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset without asset ID field +ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response is an array and not empty\r",
									"pm.test(\"Response is a non-empty array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Verify required fields for the first item in the array\r",
									"let firstItem = jsonData[0];\r",
									"\r",
									"pm.test(\"Verify ID is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('id');\r",
									"    pm.expect(firstItem.id).not.to.be.null;\r",
									"    pm.expect(firstItem.id).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify name is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('name');\r",
									"    pm.expect(firstItem.name).not.to.be.null;\r",
									"    pm.expect(firstItem.name).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('description');\r",
									"    pm.expect(firstItem.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unitId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unitId');\r",
									"    pm.expect(firstItem.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unit is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unit');\r",
									"    pm.expect(firstItem.unit).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify area is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('area');\r",
									"    pm.expect(firstItem.area).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify site is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('site');\r",
									"    pm.expect(firstItem.site).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetIcon is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetIcon');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeId');\r",
									"    pm.expect(firstItem.assetTypeId).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeParams is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeParams');\r",
									"    pm.expect(firstItem.assetTypeParams).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetType is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetType');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify parameters is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('parameters');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n   \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset without area ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let error = jsonData.errors.assetSearch[0]\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(error).to.be.eql(\"The assetSearch field is required.\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"assetId\": \"{{assetID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset without unit ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let error = jsonData.errors.assetSearch[0]\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(error).to.be.eql(\"The assetSearch field is required.\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n  \"unitId\": \"\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"assetId\": \"{{assetID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset without asset type ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let error = jsonData.errors.assetSearch[0]\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(error).to.be.eql(\"The assetSearch field is required.\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"\",\r\n  \"assetId\": \"{{assetID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset without asset ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response is an array and not empty\r",
									"pm.test(\"Response is a non-empty array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Verify required fields for the first item in the array\r",
									"let firstItem = jsonData[0];\r",
									"\r",
									"pm.test(\"Verify ID is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('id');\r",
									"    pm.expect(firstItem.id).not.to.be.null;\r",
									"    pm.expect(firstItem.id).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify name is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('name');\r",
									"    pm.expect(firstItem.name).not.to.be.null;\r",
									"    pm.expect(firstItem.name).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('description');\r",
									"    pm.expect(firstItem.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unitId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unitId');\r",
									"    pm.expect(firstItem.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unit is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unit');\r",
									"    pm.expect(firstItem.unit).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify area is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('area');\r",
									"    pm.expect(firstItem.area).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify site is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('site');\r",
									"    pm.expect(firstItem.site).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetIcon is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetIcon');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeId');\r",
									"    pm.expect(firstItem.assetTypeId).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeParams is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeParams');\r",
									"    pm.expect(firstItem.assetTypeParams).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetType is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetType');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify parameters is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('parameters');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"assetId\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset invalid search Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let error = jsonData.errors.siteId[0]\r",
									"\r",
									"pm.test(\"Check the error message\", function(){\r",
									"    pm.expect(error).to.be.eql(\"The value '6e7378fa-e917-4317-882d-1b271315ac2' is not valid.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"assetId\": \"{{assetID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/6e7378fa-e917-4317-882d-1b271315ac2"
					},
					"response": []
				},
				{
					"name": "Search_Asset Non-existing area ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the status title\", function(){\r",
									"    pm.expect(jsonData.title).to.be.eql(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"6e313a84-0ed2-4916-b9bf-28108dd116ab\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"assetId\": \"{{assetID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset Non-existing unit ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the status title\", function(){\r",
									"    pm.expect(jsonData.title).to.be.eql(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n  \"unitId\": \"6e313a84-0ed2-4916-b9bf-28108dd116ab\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"assetId\": \"{{assetID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset Non-existing asset type ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the status title\", function(){\r",
									"    pm.expect(jsonData.title).to.be.eql(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"6e313a84-0ed2-4916-b9bf-28108dd116ab\",\r\n  \"assetId\": \"{{assetID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset Non-existing asset ID +ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Ensure the response is an array and not empty\r",
									"pm.test(\"Response is a non-empty array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Verify required fields for the first item in the array\r",
									"let firstItem = jsonData[0];\r",
									"\r",
									"pm.test(\"Verify ID is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('id');\r",
									"    pm.expect(firstItem.id).not.to.be.null;\r",
									"    pm.expect(firstItem.id).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify name is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('name');\r",
									"    pm.expect(firstItem.name).not.to.be.null;\r",
									"    pm.expect(firstItem.name).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('description');\r",
									"    pm.expect(firstItem.description).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unitId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unitId');\r",
									"    pm.expect(firstItem.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify unit is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('unit');\r",
									"    pm.expect(firstItem.unit).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify area is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('area');\r",
									"    pm.expect(firstItem.area).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify site is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('site');\r",
									"    pm.expect(firstItem.site).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetIcon is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetIcon');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeId is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeId');\r",
									"    pm.expect(firstItem.assetTypeId).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetTypeParams is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetTypeParams');\r",
									"    pm.expect(firstItem.assetTypeParams).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assetType is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('assetType');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify parameters is available for the first item\", function(){\r",
									"    pm.expect(firstItem).to.have.property('parameters');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"assetId\": \"6e313a84-0ed2-4916-b9bf-28108dd116ab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset Non-existing site ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the status title\", function(){\r",
									"    pm.expect(jsonData.title).to.be.eql(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"assetId\": \"6e313a84-0ed2-4916-b9bf-28108dd116ab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/6e313a84-0ed2-4916-b9bf-28108dd116ab"
					},
					"response": []
				},
				{
					"name": "Delete asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Asset/{{assetID}}"
					},
					"response": []
				},
				{
					"name": "Delete asset invalid asset ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let error = jsonData.errors.id[0]\r",
									"\r",
									"pm.test(\"verify the error message\", function () {\r",
									"     pm.expect(error).to.be.eql(\"The value '25a5de11-df62-4215-b32d-d73eca61b23' is not valid.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Asset/25a5de11-df62-4215-b32d-d73eca61b23"
					},
					"response": []
				},
				{
					"name": "Update asset non-existing asset ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"verify the error message\", function () {\r",
									"     pm.expect(jsonData.title).to.be.eql(\"Not Found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"TEST_asset-updated\",\r\n  \"description\": \"API testing\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/244bd97d-9361-4b7d-8b7f-9b164209fe88"
					},
					"response": []
				},
				{
					"name": "Delete asset non-existing asset ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData.title).to.eql(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Asset/{{assetID}}"
					},
					"response": []
				},
				{
					"name": "Delete asset With only mandatory parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Asset/{{assetID1}}"
					},
					"response": []
				},
				{
					"name": "Delete Asset Type mandatory parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/AssetType/{{AssetTypeID1}}"
					},
					"response": []
				},
				{
					"name": "Delete Unit mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Unit/{{unitId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Area",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Area/{{areaId}}"
					},
					"response": []
				},
				{
					"name": "delete site  with only mandatory field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if response value is true\", function() {\r",
									"    pm.expect(jsonData).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/api/Site/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search_Asset Non-existing ID's",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the status title\", function(){\r",
									"    pm.expect(jsonData.title).to.be.eql(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"areaId\": \"{{areaId}}\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"assetId\": \"{{assetID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset/{{siteId1}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "DASHBOARD_API",
			"item": [
				{
					"name": "Get asset dashboard details using ID and time series value as true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json()\r",
									"\r",
									"pm.test(\"Verify the responseBody\", function () {\r",
									"     pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if message is available\", function () {\r",
									"     pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data is available\", function () {\r",
									"     pm.expect(pm.response.json()).to.have.property('data')\r",
									"     pm.expect(pm.response.json().data).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of columns\", function () {\r",
									"     pm.expect(pm.response.json().data[0]).to.have.property('columns');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of data\", function () {\r",
									"     pm.expect(pm.response.json().data[0]).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of data axis\", function () {\r",
									"     pm.expect(pm.response.json().data[0]).to.have.property('data_axis');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of attributes\", function () {\r",
									"     pm.expect(pm.response.json().data[0]).to.have.property('attributes');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of role\", function () {\r",
									"     pm.expect(pm.response.json().data[0].attributes).to.have.property('role');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of resource\", function () {\r",
									"     pm.expect(pm.response.json().data[0].attributes).to.have.property('resource');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of window spec\", function () {\r",
									"     pm.expect(pm.response.json().data[0]).to.have.property('window_spec');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of from\", function () {\r",
									"     pm.expect(pm.response.json().data[0].window_spec).to.have.property('from');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of until\", function () {\r",
									"     pm.expect(pm.response.json().data[0].window_spec).to.have.property('until');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of window\", function () {\r",
									"     pm.expect(pm.response.json().data[0].window_spec).to.have.property('window');\r",
									"});\r",
									"pm.test(\"Verify the if data consists of freq\", function () {\r",
									"     pm.expect(pm.response.json().data[0].window_spec).to.have.property('freq');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/{{DashboardID}}/true"
					},
					"response": []
				},
				{
					"name": "Get asset dashboard details using ID and time series value as False",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json()\r",
									"\r",
									"pm.test(\"Verify the responseBody\", function () {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if message is available\", function () {\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data is available\", function () {\r",
									"    pm.expect(responseBody).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of all_metrics\", function () {\r",
									"    pm.expect(responseBody.data).to.have.property('all_metrics');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of key_metrics\", function () {\r",
									"    pm.expect(responseBody.data).to.have.property('key_metrics');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if all_metrics consists of name, unit, and value\", function () {\r",
									"    responseBody.data.all_metrics.forEach((metric) => {\r",
									"        pm.expect(metric).to.have.property('name');\r",
									"        pm.expect(metric).to.have.property('unit');\r",
									"        pm.expect(metric).to.have.property('value');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if key_metrics consists of name, unit, and value\", function () {\r",
									"    responseBody.data.key_metrics.forEach((metric) => {\r",
									"        pm.expect(metric).to.have.property('name');\r",
									"        pm.expect(metric).to.have.property('unit');\r",
									"        pm.expect(metric).to.have.property('value');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/{{DashboardID}}/false"
					},
					"response": []
				},
				{
					"name": "Time series value as 1 -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json()\r",
									"\r",
									"pm.test(\"Verify the responseBody\", function () {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"verify the error displayed\", function(){\r",
									"    pm.expect(responseBody.errors.isTimeSeries[0]).to.be.equal(\"The value '1' is not valid.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/{{DashboardID}}/1"
					},
					"response": []
				},
				{
					"name": "Invalid Asset ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json()\r",
									"\r",
									"pm.test(\"Verify the responseBody\", function () {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"verify the error displayed\", function(){\r",
									"    pm.expect(responseBody.errors.id[0]).to.be.equal(\"The value '28584c0b-0050-4303-b754-08c439e32fd' is not valid.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/28584c0b-0050-4303-b754-08c439e32fd/true"
					},
					"response": []
				},
				{
					"name": "Non - existing Asset ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json()\r",
									"\r",
									"pm.test(\"Verify the responseBody\", function () {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"verify the error displayed\", function(){\r",
									"    pm.expect(responseBody.title).to.be.equal(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/28584c0b-0050-4303-b754-08c439e32fdd/true"
					},
					"response": []
				},
				{
					"name": "Without Mandatory parameters -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"verify the error displayed\", function(){\r",
									"    pm.expect(responseBody.errors.id[0]).to.be.equal( \"The value 'metrics' is not valid.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/"
					},
					"response": []
				},
				{
					"name": "Without timeseries value -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/{{DashboardID}}/"
					},
					"response": []
				}
			]
		},
		{
			"name": "HST DASHBOARD_API",
			"item": [
				{
					"name": "Get HST dashboard details using ID and time series value as true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json()\r",
									"\r",
									"pm.test(\"Verify the responseBody\", function () {\r",
									"     pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if message is available\", function () {\r",
									"     pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data is available\", function () {\r",
									"     pm.expect(pm.response.json()).to.have.property('data')\r",
									"     pm.expect(pm.response.json().data).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of columns\", function () {\r",
									"     pm.expect(pm.response.json().data[0]).to.have.property('columns');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of data\", function () {\r",
									"     pm.expect(pm.response.json().data[0]).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of data axis\", function () {\r",
									"     pm.expect(pm.response.json().data[0]).to.have.property('data_axis');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of attributes\", function () {\r",
									"     pm.expect(pm.response.json().data[0]).to.have.property('attributes');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of role\", function () {\r",
									"     pm.expect(pm.response.json().data[0].attributes).to.have.property('role');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of resource\", function () {\r",
									"     pm.expect(pm.response.json().data[0].attributes).to.have.property('resource');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of window spec\", function () {\r",
									"     pm.expect(pm.response.json().data[0]).to.have.property('window_spec');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of from\", function () {\r",
									"     pm.expect(pm.response.json().data[0].window_spec).to.have.property('from');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of until\", function () {\r",
									"     pm.expect(pm.response.json().data[0].window_spec).to.have.property('until');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of window\", function () {\r",
									"     pm.expect(pm.response.json().data[0].window_spec).to.have.property('window');\r",
									"});\r",
									"pm.test(\"Verify the if data consists of freq\", function () {\r",
									"     pm.expect(pm.response.json().data[0].window_spec).to.have.property('freq');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/{{HSTDashboard}}/true"
					},
					"response": []
				},
				{
					"name": "Get HST dashboard details using ID and time series value as False",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json()\r",
									"\r",
									"pm.test(\"Verify the responseBody\", function () {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if message is available\", function () {\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data is available\", function () {\r",
									"    pm.expect(responseBody).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of all_metrics\", function () {\r",
									"    pm.expect(responseBody.data).to.have.property('all_metrics');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if data consists of key_metrics\", function () {\r",
									"    pm.expect(responseBody.data).to.have.property('key_metrics');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if all_metrics consists of name, unit, and value\", function () {\r",
									"    responseBody.data.all_metrics.forEach((metric) => {\r",
									"        pm.expect(metric).to.have.property('name');\r",
									"        pm.expect(metric).to.have.property('unit');\r",
									"        pm.expect(metric).to.have.property('value');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the if key_metrics consists of name, unit, and value\", function () {\r",
									"    responseBody.data.key_metrics.forEach((metric) => {\r",
									"        pm.expect(metric).to.have.property('name');\r",
									"        pm.expect(metric).to.have.property('unit');\r",
									"        pm.expect(metric).to.have.property('value');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/{{HSTDashboard}}/false"
					},
					"response": []
				},
				{
					"name": "Time series value as 1 -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json()\r",
									"\r",
									"pm.test(\"Verify the responseBody\", function () {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"verify the error displayed\", function(){\r",
									"    pm.expect(responseBody.errors.isTimeSeries[0]).to.be.equal(\"The value '1' is not valid.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/{{HSTDashboard}}/1"
					},
					"response": []
				},
				{
					"name": "Invalid HST ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json()\r",
									"\r",
									"pm.test(\"Verify the responseBody\", function () {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"verify the error displayed\", function(){\r",
									"    pm.expect(responseBody.errors.id[0]).to.be.equal(\"The value '28584c0b-0050-4303-b754-08c439e32fd' is not valid.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/28584c0b-0050-4303-b754-08c439e32fd/true"
					},
					"response": []
				},
				{
					"name": "Non - existing HST ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json()\r",
									"\r",
									"pm.test(\"Verify the responseBody\", function () {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"verify the error displayed\", function(){\r",
									"    pm.expect(responseBody.title).to.be.equal(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/28584c0b-0050-4303-b754-08c439e32fdd/true"
					},
					"response": []
				},
				{
					"name": "Without Mandatory parameters -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"let responseBody = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"verify the error displayed\", function(){\r",
									"    pm.expect(responseBody.errors.id[0]).to.be.equal( \"The value 'metrics' is not valid.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/"
					},
					"response": []
				},
				{
					"name": "Without timeseries value -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify the status code\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Asset/metrics/{{HSTDashboard}}/"
					},
					"response": []
				}
			]
		},
		{
			"name": "EVENTS_API",
			"item": [
				{
					"name": "Create Site  only mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"siteId1\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.set(\"RandomName\", pm.variables.replaceIn('{{$randomFirstName}}'))\r",
									"\r",
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"RandomName1\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{RandomName1}}\",\r\n  \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/SIte"
					},
					"response": []
				},
				{
					"name": "Create Area",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AreaName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"console.log(jsonData.id)\r",
									"let ID = jsonData.id\r",
									"console.log(ID)\r",
									"pm.environment.set(\"areaId\",ID)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{AreaName}}\",\r\n  \"description\": \"string\",\r\n  \"siteId\": \"{{siteId1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Area"
					},
					"response": []
				},
				{
					"name": "Create unit with only mandatory fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"UnitName1\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"unitId1\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{UnitName1}}\",\r\n  \"description\": \"\",\r\n  \"areaId\": \"{{areaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Unit"
					},
					"response": []
				},
				{
					"name": "Create Asset Type only mandatory fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetTypeName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"AssetTypeID1\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Name",
									"value": "{{AssetTypeName}}",
									"type": "text"
								},
								{
									"key": "Description",
									"value": "",
									"type": "text"
								},
								{
									"key": "AssetCategory",
									"value": "",
									"type": "text"
								},
								{
									"key": "AssetIconFile",
									"value": "",
									"type": "text"
								},
								{
									"key": "ParamsFile",
									"type": "file",
									"src": "postman-cloud:///1ef2f93c-5388-4b90-9968-63b3e19569c2"
								},
								{
									"key": "Parameters",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": "{{baseURL}}/api/AssetType"
					},
					"response": []
				},
				{
					"name": "Create asset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random first name\r",
									"var firstName = Math.random().toString(36).substring(7);\r",
									"pm.environment.set(\"AssetName\", firstName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify ID is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if description is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.name).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"verify the value of description\", function(){\r",
									"    pm.expect(jsonData.description).to.eql(\"Test\")\r",
									"})\r",
									"\r",
									"pm.test(\"Verify if unitId is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('unitId');\r",
									"    pm.expect(jsonData.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetTypeId is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetTypeId');\r",
									"    pm.expect(jsonData.unitId).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if unit is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('unit');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if assetType is available\", function(){\r",
									"    pm.expect(jsonData).to.have.property('assetType');\r",
									"});\r",
									"\r",
									"if (jsonData.id) {\r",
									"    console.log(jsonData.id);\r",
									"    let ID = jsonData.id;\r",
									"    console.log(ID);\r",
									"    pm.environment.set(\"assetID\", ID);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{AssetName}}\",\r\n  \"description\": \"Test\",\r\n  \"unitId\": \"{{unitId1}}\",\r\n  \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n  \"parameters\": \"{\\\"asset_metadata\\\":[{\\\"name\\\":\\\"serialNumber\\\",\\\"displayNumber\\\":\\\"Serial Number\\\",\\\"value\\\":463272352},{\\\"name\\\":\\\"installedOn\\\",\\\"displayNumber\\\":\\\"Installed On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"lastMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Last Maintenance On\\\",\\\"value\\\":\\\"07/31/2023\\\"},{\\\"name\\\":\\\"nextMaintenanceOn\\\",\\\"displayNumber\\\":\\\"Next Maintenance On\\\",\\\"value\\\":\\\"07/31/2024\\\"}]}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Asset"
					},
					"response": []
				},
				{
					"name": "Create Event - event type 0 - Maintenance event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify if the ID is displayed\", function () {\r",
									"        pm.expect(responseData).to.be.an('object');\r",
									"        pm.expect(responseData).to.have.property('id');\r",
									"        pm.expect(responseData.id).not.to.be.null\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"Verify if the timestamp is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('timestamp');\r",
									"    pm.expect(responseData.timestamp).not.to.be.null\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if the assetID is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('assetId');\r",
									"        pm.expect(responseData.assetId).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the asset is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('asset');\r",
									"    pm.expect(responseData.asset).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the assetType is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('assetType');\r",
									"    pm.expect(responseData.assetType).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the unit is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('unit');\r",
									"    pm.expect(responseData.unit).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the area is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('area');\r",
									"    pm.expect(responseData.area).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the eventType is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('eventType');\r",
									"    pm.expect(responseData.eventType).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the isAcknowledged is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('isAcknowledged');\r",
									"    pm.expect(responseData.isAcknowledged).to.eql(false)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the acknowledgedAt is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('acknowledgedAt');\r",
									"    pm.expect(responseData.acknowledgedAt).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the acknowledgedBy is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('acknowledgedBy');\r",
									"    pm.expect(responseData.acknowledgedBy).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the message is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData.message).not.to.be.null\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"EventType is a valid integer value\", function () {  \r",
									"    pm.expect(responseData.eventType).to.be.a('number', \"EventType should be a valid integer value\");\r",
									"});\r",
									"\r",
									"\r",
									"console.log(responseData.id)\r",
									"let ID = responseData.id\r",
									"console.log(ID)\r",
									"pm.environment.set(\"EventID\",ID)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"2024-07-22T12:45:52.840Z\",\r\n  \"assetId\": \"{{assetID}}\",\r\n  \"eventType\": 0,\r\n  \"isAcknowledged\": true,\r\n  \"acknowledgedAt\": \"2024-07-24T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"Test\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"API Testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create Event - event type 1 - operation event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify if the ID is displayed\", function () {\r",
									"        pm.expect(responseData).to.be.an('object');\r",
									"        pm.expect(responseData).to.have.property('id');\r",
									"        pm.expect(responseData.id).not.to.be.null\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"Verify if the timestamp is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('timestamp');\r",
									"    pm.expect(responseData.timestamp).not.to.be.null\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if the assetID is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('assetId');\r",
									"        pm.expect(responseData.assetId).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the asset is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('asset');\r",
									"    pm.expect(responseData.asset).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the assetType is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('assetType');\r",
									"    pm.expect(responseData.assetType).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the unit is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('unit');\r",
									"    pm.expect(responseData.unit).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the area is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('area');\r",
									"    pm.expect(responseData.area).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the eventType is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('eventType');\r",
									"    pm.expect(responseData.eventType).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the isAcknowledged is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('isAcknowledged');\r",
									"    pm.expect(responseData.isAcknowledged).to.eql(false)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the acknowledgedAt is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('acknowledgedAt');\r",
									"    pm.expect(responseData.acknowledgedAt).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the acknowledgedBy is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('acknowledgedBy');\r",
									"    pm.expect(responseData.acknowledgedBy).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the message is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData.message).not.to.be.null\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"EventType is a valid integer value\", function () {  \r",
									"    pm.expect(responseData.eventType).to.be.a('number', \"EventType should be a valid integer value\");\r",
									"});\r",
									"\r",
									"\r",
									"console.log(responseData.id)\r",
									"let ID = responseData.id\r",
									"console.log(ID)\r",
									"pm.environment.set(\"EventID\",ID)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"2024-07-22T12:45:52.840Z\",\r\n  \"assetId\": \"{{assetID}}\",\r\n  \"eventType\": 1,\r\n  \"isAcknowledged\": true,\r\n  \"acknowledgedAt\": \"2024-07-24T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"Test\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"API Testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create Event with only mandatory parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify if the ID is displayed\", function () {\r",
									"        pm.expect(responseData).to.be.an('object');\r",
									"        pm.expect(responseData).to.have.property('id');\r",
									"        pm.expect(responseData.id).not.to.be.null\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"Verify if the timestamp is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('timestamp');\r",
									"    pm.expect(responseData.timestamp).not.to.be.null\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if the assetID is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('assetId');\r",
									"        pm.expect(responseData.assetId).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the asset is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('asset');\r",
									"    pm.expect(responseData.asset).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the assetType is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('assetType');\r",
									"    pm.expect(responseData.assetType).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the unit is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('unit');\r",
									"    pm.expect(responseData.unit).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the area is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('area');\r",
									"    pm.expect(responseData.area).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the eventType is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('eventType');\r",
									"    pm.expect(responseData.eventType).not.to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the isAcknowledged is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('isAcknowledged');\r",
									"    pm.expect(responseData.isAcknowledged).not.to.be.null\r",
									"    pm.expect(responseData.isAcknowledged).to.eql(false)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the acknowledgedAt is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('acknowledgedAt');\r",
									"    pm.expect(responseData.acknowledgedAt).to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the acknowledgedBy is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('acknowledgedBy');\r",
									"    pm.expect(responseData.acknowledgedBy).to.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the message is displayed\", function () {\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData.message).not.to.be.null\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"EventType is a valid integer value\", function () {  \r",
									"    pm.expect(responseData.eventType).to.be.a('number', \"EventType should be a valid integer value\");\r",
									"});\r",
									"\r",
									"\r",
									"console.log(responseData.id)\r",
									"let ID = responseData.id\r",
									"console.log(ID)\r",
									"pm.environment.set(\"EventID1\",ID)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"2024-07-22T12:45:52.840Z\",\r\n  \"assetId\": \"{{Eventasset}}\",\r\n  \"eventType\": 1,\r\n  \"message\": \"API Testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create Event invalid assetID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.errors).to.have.property(\"event\")\r",
									"    pm.expect(responseData.errors.event[0]).to.eql(\"The event field is required.\")\r",
									"})\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.errors).to.have.property(\"$.assetId\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"2024-07-22T12:45:52.840Z\",\r\n  \"assetId\": \"28584c0b-0050-4303-b754-08c439e32fd\",\r\n  \"eventType\": 1,\r\n  \"isAcknowledged\": true,\r\n  \"acknowledgedAt\": \"2024-07-24T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"Test\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"API Testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create Event non-existing assetID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.Message).to.eql(\"Internal Server Error.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"2024-07-22T12:45:52.840Z\",\r\n  \"assetId\": \"{{assetID1}}\",\r\n  \"eventType\": 1,\r\n  \"isAcknowledged\": true,\r\n  \"acknowledgedAt\": \"2024-07-24T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"Test\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"API Testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create Event without asset ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.errors.event[0]).to.eql(\"The event field is required.\")\r",
									"})\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.errors).to.have.property(\"$.assetId\")\r",
									"    })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\":  \"2024-07-22T12:45:52.840Z\",\r\n  \"assetId\": \"\",\r\n  \"eventType\": 1,\r\n  \"isAcknowledged\": true,\r\n  \"acknowledgedAt\": \"2024-07-24T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"Test\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"API Testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create Event without message -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.errors).to.have.property(\"Message\")\r",
									"    pm.expect(responseData.errors.Message[0]).to.eql(\"The Message field is required.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"2024-07-22T12:45:52.840Z\",\r\n  \"assetId\": \"{{Eventasset}}\",\r\n  \"eventType\": 23,\r\n  \"isAcknowledged\": true,\r\n  \"acknowledgedAt\": \"2024-07-24T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"Test\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create Event without timestamp -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.errors).to.have.property(\"event\")\r",
									"    pm.expect(responseData.errors.event[0]).to.eql(\"The event field is required.\")\r",
									"})\r",
									"\r",
									"pm.test(\"verify the error message has timestamp field highlighted\", function(){\r",
									"    pm.expect(responseData.errors).to.have.property(\"$.timestamp\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"\",\r\n  \"assetId\": \"{{Eventasset}}\",\r\n  \"eventType\": 23,\r\n  \"isAcknowledged\": true,\r\n  \"acknowledgedAt\": \"2024-07-24T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"Test\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"API Testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create Event event type as string -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.errors).to.have.property(\"event\")\r",
									"    pm.expect(responseData.errors.event[0]).to.eql(\"The event field is required.\")\r",
									"})\r",
									"\r",
									"pm.test(\"Verify the event type field is high lighted in errors\", function(){\r",
									"    pm.expect(responseData.errors).to.have.property(\"$.eventType\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"2024-07-22T12:45:52.840Z\",\r\n  \"assetId\": \"{{Eventasset}}\",\r\n  \"eventType\": \"Test\",\r\n  \"isAcknowledged\": true,\r\n  \"acknowledgedAt\": \"2024-07-24T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"Test\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"API Testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create Event is acknowledged as boolean -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.errors).to.have.property(\"event\")\r",
									"    pm.expect(responseData.errors.event[0]).to.eql(\"The event field is required.\")\r",
									"})\r",
									"\r",
									"pm.test(\"Verify the event type field is high lighted in errors\", function(){\r",
									"    pm.expect(responseData.errors).to.have.property(\"$.isAcknowledged\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"2024-07-22T12:45:52.840Z\",\r\n  \"assetId\": \"{{Eventasset}}\",\r\n  \"eventType\": 0,\r\n  \"isAcknowledged\": 1,\r\n  \"acknowledgedAt\": \"2024-07-24T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"Test\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"API Testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create Event acknowledgedAt invalid format -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.errors).to.have.property(\"event\")\r",
									"    pm.expect(responseData.errors.event[0]).to.eql(\"The event field is required.\")\r",
									"})\r",
									"\r",
									"pm.test(\"Verify the event type field is high lighted in errors\", function(){\r",
									"    pm.expect(responseData.errors).to.have.property(\"$.acknowledgedAt\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"2024-07-22T12:45:52.840Z\",\r\n  \"assetId\": \"{{Eventasset}}\",\r\n  \"eventType\": 0,\r\n  \"isAcknowledged\": true,\r\n  \"acknowledgedAt\": \"2024-24-07T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"Test\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"API Testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create Event wrong timestamp format -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.errors.event[0]).to.eql(\"The event field is required.\")\r",
									"})\r",
									"\r",
									"// Check if 'timestamp' error is available\r",
									"pm.test(\"Check if 'timestamp' error is available\", function () {\r",
									"    pm.expect(responseData.errors).to.have.property('$.timestamp');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"2024-24-07T12:45:52\",\r\n  \"assetId\": \"{{Eventasset}}\",\r\n  \"eventType\": 1,\r\n  \"isAcknowledged\": true,\r\n  \"acknowledgedAt\": \"2024-07-24T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"Test\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"API Testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create event message character length more than 300 -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify the status code\", function(){\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the error message\", function () {\r",
									"     pm.expect(responseData.errors.Message[0]).to.eql(\"The field Message must be a string or array type with a maximum length of '300'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"2024-07-22T12:45:52.840Z\",\r\n  \"assetId\": \"{{Eventasset}}\",\r\n  \"eventType\": 23,\r\n  \"isAcknowledged\": true,\r\n  \"acknowledgedAt\": \"2024-07-24T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"Test\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"tY3jfnneQFptG_RSU}zu+8H*#+#{]TaU-KK{EpNe_JP#-x{eY)z$TtG}C4$#8]b.iwdk$Y]3kX;xt1tVU]/MqX$8#9eymV!wwvBmRy;3pr0$)8W)@VFq:gz)t.@*1g&@X}%LX8euEfJ8gfp/]0_Lg&GBmV)ydHDD[*6XT$%@CM8P$MDxCHERif+1WEd$Cf3Ci86J1jge@{Yt}YP:N4x%tNi.p3Ba/3j&ee9iH9#Hgv5*#rBR=M@&94GP6f@[*tHEh+_4e,u(8pjg9HVAiAtd/;eaDVP=]y47_)6Pp3g$mbE?Jv:RNU;!;E+k0+;K64!5*(Py{\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Create event acknowledged by character length more than 36 -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify the status code\", function(){\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the error message\", function () {\r",
									"     pm.expect(responseData.errors.AcknowledgedBy[0]).to.eql(\"The field AcknowledgedBy must be a string or array type with a maximum length of '36'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timestamp\": \"2024-07-22T12:45:52.840Z\",\r\n  \"assetId\": \"{{Eventasset}}\",\r\n  \"eventType\": 23,\r\n  \"isAcknowledged\": true,\r\n  \"acknowledgedAt\": \"2024-07-24T12:45:52.840Z\",\r\n  \"acknowledgedBy\": \"qwertyuiopasdfghjklzxcvbnm12345678901234\",\r\n  \"acknowledgedByUsername\": \"Panchami\",\r\n  \"message\": \"API Testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "search Event by site ID and is acknowledged as false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate the contents of the response object\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event).to.be.an('object');\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('timestamp');\r",
									"        pm.expect(event).to.have.property('assetId');\r",
									"        pm.expect(event).to.have.property('asset');\r",
									"        pm.expect(event).to.have.property('assetType');\r",
									"        pm.expect(event).to.have.property('unit');\r",
									"        pm.expect(event).to.have.property('area');\r",
									"        pm.expect(event).to.have.property('eventType');\r",
									"        pm.expect(event).to.have.property('isAcknowledged');\r",
									"        pm.expect(event).to.have.property('acknowledgedAt');\r",
									"        pm.expect(event).to.have.property('acknowledgedBy');\r",
									"        pm.expect(event).to.have.property('message');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if isAcknowledged alue is false\", function () {  \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event.isAcknowledged).to.eql(false)\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": null,\r\n    \"assetTypeId\": null,\r\n    \"eventType\": null,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": false,\r\n    \"sortColumn\": null,\r\n    \"sortOrder\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "search Event by site ID and sort column as isAcknowledged in ascending order (false)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate the contents of the response object\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event).to.be.an('object');\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('timestamp');\r",
									"        pm.expect(event).to.have.property('assetId');\r",
									"        pm.expect(event).to.have.property('asset');\r",
									"        pm.expect(event).to.have.property('assetType');\r",
									"        pm.expect(event).to.have.property('unit');\r",
									"        pm.expect(event).to.have.property('area');\r",
									"        pm.expect(event).to.have.property('eventType');\r",
									"        pm.expect(event).to.have.property('isAcknowledged');\r",
									"        pm.expect(event).to.have.property('acknowledgedAt');\r",
									"        pm.expect(event).to.have.property('acknowledgedBy');\r",
									"        pm.expect(event).to.have.property('message');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// Check if the first object's isAcknowledged field is false\r",
									"pm.test(\"First object's isAcknowledged is true\", function () {\r",
									"    const firstItem = responseData[0];\r",
									"    pm.expect(firstItem.isAcknowledged).to.be.false;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": null,\r\n    \"assetTypeId\": null,\r\n    \"eventType\": null,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": null,\r\n    \"sortColumn\": \"isAcknowledged\",\r\n    \"sortOrder\": \"asc\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Get events details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate the contents of the response object\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event).to.be.an('object');\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('timestamp');\r",
									"        pm.expect(event).to.have.property('assetId');\r",
									"        pm.expect(event).to.have.property('asset');\r",
									"        pm.expect(event).to.have.property('assetType');\r",
									"        pm.expect(event).to.have.property('unit');\r",
									"        pm.expect(event).to.have.property('area');\r",
									"        pm.expect(event).to.have.property('eventType');\r",
									"        pm.expect(event).to.have.property('isAcknowledged');\r",
									"        pm.expect(event).to.have.property('acknowledgedAt');\r",
									"        pm.expect(event).to.have.property('acknowledgedBy');\r",
									"        pm.expect(event).to.have.property('message');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"EventType is a valid integer value\", function () {  \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event.eventType).to.be.a('number', \"EventType should be a valid integer value\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Event"
					},
					"response": []
				},
				{
					"name": "Get event details by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify the status code\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if 'id' is available\", function () {\r",
									"    pm.expect(response).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'timestamp' is available\", function () {\r",
									"    pm.expect(response).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'assetId' is available\", function () {\r",
									"    pm.expect(response).to.have.property('assetId');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'asset' is available\", function () {\r",
									"    pm.expect(response).to.have.property('asset');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'assetType' is available\", function () {\r",
									"    pm.expect(response).to.have.property('assetType');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'unit' is available\", function () {\r",
									"    pm.expect(response).to.have.property('unit');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'area' is available\", function () {\r",
									"    pm.expect(response).to.have.property('area');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'eventType' is a number\", function () {\r",
									"    pm.expect(response.eventType).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'message' is a string and not empty\", function () {\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'acknowledgedBy' is available\", function () {\r",
									"    pm.expect(response).to.have.property(\"acknowledgedBy\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'acknowledgedAt' available'\", function () {\r",
									"    pm.expect(response).to.have.property(\"acknowledgedAt\")\r",
									"    pm.expect(response.acknowledgedAt).to.not.be.empty\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'isAcknowledged' is available\", function () {\r",
									"    pm.expect(response).to.have.property(\"isAcknowledged\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Event/{{EventID}}"
					},
					"response": []
				},
				{
					"name": "Get event details by non-existing ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify the status code\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"})\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if 'title' is available\", function () {\r",
									"    pm.expect(response).to.have.property('title');\r",
									"    pm.expect(response.title).to.eql(\"Not Found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Event/6f60e8cd-b591-4b11-b88d-6a0b872c194d"
					},
					"response": []
				},
				{
					"name": "Get event details by invalid ID format -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify the status code\", function () {\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if 'title' is available\", function () {\r",
									"    pm.expect(response).to.have.property('errors');\r",
									"    pm.expect(response.errors.id[0]).to.eql(\"The value '6f60e8cd-b591-4b11-b88d-6a0b872c194' is not valid.\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/api/Event/6f60e8cd-b591-4b11-b88d-6a0b872c194"
					},
					"response": []
				},
				{
					"name": "Update the event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify the status code\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if 'id' is available\", function () {\r",
									"    pm.expect(response).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'timestamp' is available\", function () {\r",
									"    pm.expect(response).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'assetId' is available\", function () {\r",
									"    pm.expect(response).to.have.property('assetId');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'asset' is available\", function () {\r",
									"    pm.expect(response).to.have.property('asset');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'assetType' is available\", function () {\r",
									"    pm.expect(response).to.have.property('assetType');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'unit' is available\", function () {\r",
									"    pm.expect(response).to.have.property('unit');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'area' is available\", function () {\r",
									"    pm.expect(response).to.have.property('area');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'eventType' is a number\", function () {\r",
									"    pm.expect(response.eventType).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'message' is a string and not empty\", function () {\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'acknowledgedBy' is 'Test'\", function () {\r",
									"    pm.expect(response).to.have.property(\"acknowledgedBy\")\r",
									"    pm.expect(response.acknowledgedBy).to.eql(\"e3609ad7-e175-438e-80e0-d6b55c8cd305\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'acknowledgedAt' is 'Test'\", function () {\r",
									"    pm.expect(response).to.have.property(\"acknowledgedAt\")\r",
									"    pm.expect(response.acknowledgedAt).to.not.be.empty\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'isAcknowledged' is 'Test'\", function () {\r",
									"    pm.expect(response).to.have.property(\"isAcknowledged\")\r",
									"    pm.expect(response.isAcknowledged).to.eql(true)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": "{{baseURL}}/api/Event/{{EventID}}"
					},
					"response": []
				},
				{
					"name": "Update the event non-existing event Id -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify the status code\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"})\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if 'title' is available\", function () {\r",
									"    pm.expect(response).to.have.property('title');\r",
									"    pm.expect(response.title).to.eql(\"Not Found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": "{{baseURL}}/api/Event/93e4b3f1-38f6-4d60-92c0-7f1df7178b13"
					},
					"response": []
				},
				{
					"name": "Update event details by invalid ID format -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify the status code\", function () {\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if 'title' is available\", function () {\r",
									"    pm.expect(response).to.have.property('errors');\r",
									"    pm.expect(response.errors.id[0]).to.eql(\"The value '6f60e8cd-b591-4b11-b88d-6a0b872c194' is not valid.\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": "{{baseURL}}/api/Event/6f60e8cd-b591-4b11-b88d-6a0b872c194"
					},
					"response": []
				},
				{
					"name": "search Event by only site ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate the contents of the response object\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event).to.be.an('object');\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('timestamp');\r",
									"        pm.expect(event).to.have.property('assetId');\r",
									"        pm.expect(event).to.have.property('asset');\r",
									"        pm.expect(event).to.have.property('assetType');\r",
									"        pm.expect(event).to.have.property('unit');\r",
									"        pm.expect(event).to.have.property('area');\r",
									"        pm.expect(event).to.have.property('eventType');\r",
									"        pm.expect(event).to.have.property('isAcknowledged');\r",
									"        pm.expect(event).to.have.property('acknowledgedAt');\r",
									"        pm.expect(event).to.have.property('acknowledgedBy');\r",
									"        pm.expect(event).to.have.property('message');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"EventType is a valid integer value\", function () {  \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event.eventType).to.be.a('number', \"EventType should be a valid integer value\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": null,\r\n    \"assetTypeId\": null,\r\n    \"eventType\": null,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": null,\r\n    \"sortColumn\": null,\r\n    \"sortOrder\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "search Event by site ID and Asset Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate the contents of the response object\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event).to.be.an('object');\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('timestamp');\r",
									"        pm.expect(event).to.have.property('assetId');\r",
									"        pm.expect(event).to.have.property('asset');\r",
									"        pm.expect(event).to.have.property('assetType');\r",
									"        pm.expect(event).to.have.property('unit');\r",
									"        pm.expect(event).to.have.property('area');\r",
									"        pm.expect(event).to.have.property('eventType');\r",
									"        pm.expect(event).to.have.property('isAcknowledged');\r",
									"        pm.expect(event).to.have.property('acknowledgedAt');\r",
									"        pm.expect(event).to.have.property('acknowledgedBy');\r",
									"        pm.expect(event).to.have.property('message');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"EventType is a valid integer value\", function () {  \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event.eventType).to.be.a('number', \"EventType should be a valid integer value\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": \"{{assetID}}\",\r\n    \"assetTypeId\": null,\r\n    \"eventType\": null,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": null,\r\n    \"sortColumn\": null,\r\n    \"sortOrder\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "search Event by site ID and Asset type Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate the contents of the response object\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event).to.be.an('object');\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('timestamp');\r",
									"        pm.expect(event).to.have.property('assetId');\r",
									"        pm.expect(event).to.have.property('asset');\r",
									"        pm.expect(event).to.have.property('assetType');\r",
									"        pm.expect(event).to.have.property('unit');\r",
									"        pm.expect(event).to.have.property('area');\r",
									"        pm.expect(event).to.have.property('eventType');\r",
									"        pm.expect(event).to.have.property('isAcknowledged');\r",
									"        pm.expect(event).to.have.property('acknowledgedAt');\r",
									"        pm.expect(event).to.have.property('acknowledgedBy');\r",
									"        pm.expect(event).to.have.property('message');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"EventType is a valid integer value\", function () {  \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event.eventType).to.be.a('number', \"EventType should be a valid integer value\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": null,\r\n    \"assetTypeId\": \"{{AssetTypeID1}}\",\r\n    \"eventType\": null,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": null,\r\n    \"sortColumn\": null,\r\n    \"sortOrder\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "search Event by site ID and timestamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate the contents of the response object\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event).to.be.an('object');\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('timestamp');\r",
									"        pm.expect(event).to.have.property('assetId');\r",
									"        pm.expect(event).to.have.property('asset');\r",
									"        pm.expect(event).to.have.property('assetType');\r",
									"        pm.expect(event).to.have.property('unit');\r",
									"        pm.expect(event).to.have.property('area');\r",
									"        pm.expect(event).to.have.property('eventType');\r",
									"        pm.expect(event).to.have.property('isAcknowledged');\r",
									"        pm.expect(event).to.have.property('acknowledgedAt');\r",
									"        pm.expect(event).to.have.property('acknowledgedBy');\r",
									"        pm.expect(event).to.have.property('message');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"verify the timestamp value\", function () {  \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event.timestamp).to.be.eql(\"2024-07-22T12:45:52.84\")\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": null,\r\n    \"assetTypeId\": null,\r\n    \"eventType\": null,\r\n    \"timestamp\": \"2024-07-22T12:45:52.84\",\r\n    \"isAcknowledged\": null,\r\n    \"sortColumn\": null,\r\n    \"sortOrder\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "search Event by site ID and Event type 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate the contents of the response object\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event).to.be.an('object');\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('timestamp');\r",
									"        pm.expect(event).to.have.property('assetId');\r",
									"        pm.expect(event).to.have.property('asset');\r",
									"        pm.expect(event).to.have.property('assetType');\r",
									"        pm.expect(event).to.have.property('unit');\r",
									"        pm.expect(event).to.have.property('area');\r",
									"        pm.expect(event).to.have.property('eventType');\r",
									"        pm.expect(event).to.have.property('isAcknowledged');\r",
									"        pm.expect(event).to.have.property('acknowledgedAt');\r",
									"        pm.expect(event).to.have.property('acknowledgedBy');\r",
									"        pm.expect(event).to.have.property('message');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"EventType is a 0\", function () {  \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event.eventType).to.be.eql(0)\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": null,\r\n    \"assetTypeId\": null,\r\n    \"eventType\": 0,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": null,\r\n    \"sortColumn\": null,\r\n    \"sortOrder\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "search Event by site ID and Event type 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate the contents of the response object\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event).to.be.an('object');\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('timestamp');\r",
									"        pm.expect(event).to.have.property('assetId');\r",
									"        pm.expect(event).to.have.property('asset');\r",
									"        pm.expect(event).to.have.property('assetType');\r",
									"        pm.expect(event).to.have.property('unit');\r",
									"        pm.expect(event).to.have.property('area');\r",
									"        pm.expect(event).to.have.property('eventType');\r",
									"        pm.expect(event).to.have.property('isAcknowledged');\r",
									"        pm.expect(event).to.have.property('acknowledgedAt');\r",
									"        pm.expect(event).to.have.property('acknowledgedBy');\r",
									"        pm.expect(event).to.have.property('message');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"EventType is a 1\", function () {  \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event.eventType).to.be.eql(1)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": null,\r\n    \"assetTypeId\": null,\r\n    \"eventType\": 1,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": null,\r\n    \"sortColumn\": null,\r\n    \"sortOrder\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "search Event by site ID and is acknowledged as true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate the contents of the response object\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event).to.be.an('object');\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('timestamp');\r",
									"        pm.expect(event).to.have.property('assetId');\r",
									"        pm.expect(event).to.have.property('asset');\r",
									"        pm.expect(event).to.have.property('assetType');\r",
									"        pm.expect(event).to.have.property('unit');\r",
									"        pm.expect(event).to.have.property('area');\r",
									"        pm.expect(event).to.have.property('eventType');\r",
									"        pm.expect(event).to.have.property('isAcknowledged');\r",
									"        pm.expect(event).to.have.property('acknowledgedAt');\r",
									"        pm.expect(event).to.have.property('acknowledgedBy');\r",
									"        pm.expect(event).to.have.property('message');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if isAcknowledged value is true\", function () {  \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event.isAcknowledged).to.eql(true)\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": null,\r\n    \"assetTypeId\": null,\r\n    \"eventType\": null,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": true,\r\n    \"sortColumn\": null,\r\n    \"sortOrder\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "search Event by site ID and sort column as isAcknowledged in descending order (true)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate the contents of the response object\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(event) {\r",
									"        pm.expect(event).to.be.an('object');\r",
									"        pm.expect(event).to.have.property('id');\r",
									"        pm.expect(event).to.have.property('timestamp');\r",
									"        pm.expect(event).to.have.property('assetId');\r",
									"        pm.expect(event).to.have.property('asset');\r",
									"        pm.expect(event).to.have.property('assetType');\r",
									"        pm.expect(event).to.have.property('unit');\r",
									"        pm.expect(event).to.have.property('area');\r",
									"        pm.expect(event).to.have.property('eventType');\r",
									"        pm.expect(event).to.have.property('isAcknowledged');\r",
									"        pm.expect(event).to.have.property('acknowledgedAt');\r",
									"        pm.expect(event).to.have.property('acknowledgedBy');\r",
									"        pm.expect(event).to.have.property('message');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Check if the first object's isAcknowledged field is true\r",
									"pm.test(\"First object's isAcknowledged is true\", function () {\r",
									"    const firstItem = responseData[0];\r",
									"    pm.expect(firstItem.isAcknowledged).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": null,\r\n    \"assetTypeId\": null,\r\n    \"eventType\": null,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": null,\r\n    \"sortColumn\": \"isAcknowledged\",\r\n    \"sortOrder\": \"desc\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "Search Event with invalid site ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.errors.siteId[0]).to.eql(\"The value 'bb417fd7-0490-4547-b488-72576a3142c' is not valid.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": null,\r\n    \"assetTypeId\": null,\r\n    \"eventType\": null,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": null,\r\n    \"sortColumn\": \"isAcknowledged\",\r\n    \"sortOrder\": \"desc\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/bb417fd7-0490-4547-b488-72576a3142c"
					},
					"response": []
				},
				{
					"name": "Search event with Non-existing Site ID -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.title).to.eql(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": null,\r\n    \"assetTypeId\": null,\r\n    \"eventType\": null,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": null,\r\n    \"sortColumn\": \"isAcknowledged\",\r\n    \"sortOrder\": \"desc\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/bb417fd7-0490-4547-b488-72576a3142c4"
					},
					"response": []
				},
				{
					"name": "search Event by site ID and wrong Asset Id -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"pm.test(\"verify the error message\", function(){\r",
									"    pm.expect(responseData.title).to.eql(\"Not Found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": \"28584c0b-0050-4303-b754-08c439e32fd5\",\r\n    \"assetTypeId\": null,\r\n    \"eventType\": null,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": null,\r\n    \"sortColumn\": null,\r\n    \"sortOrder\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/{{siteId1}}"
					},
					"response": []
				},
				{
					"name": "search Event by site ID and wrong Asset type Id -ve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"let responseData = pm.response.json()\r",
									"\r",
									"// pm.test(\"verify the error message\", function(){\r",
									"//     pm.expect(responseData.title).to.eql(\"Not Found\")\r",
									"// })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": null,\r\n    \"assetTypeId\": \"ef8cb844-6f79-44ae-9e3b-02cc5db2a130\",\r\n    \"eventType\": null,\r\n    \"timestamp\": null,\r\n    \"isAcknowledged\": null,\r\n    \"sortColumn\": null,\r\n    \"sortOrder\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/api/Event/{{siteId1}}"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{RPT_Token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}